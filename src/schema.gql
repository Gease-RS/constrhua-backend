# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserDto {
  id: Int!
  email: String!
  fullname: String!
  username: String!
  role: RoleUser!
  avatar: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Papéis disponíveis para o usuário"""
enum RoleUser {
  ADMIN
  FREE
  STANDARD
  PREMIUM
  ENTERPRISE
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type AuthResult {
  accessToken: String!
  refreshToken: String!
  csrfToken: String!
  user: UserDto!
  message: String
}

type Category {
  id: Int!
  name: String!
  posts: [Post!]
}

type ReplyLike {
  id: Int!
  userId: Int!
  replyId: Int!
  user: User!
  reply: Reply
  createdAt: DateTime!
}

type Reply {
  id: Int!
  content: String!
  userId: Int!
  commentId: Int!
  user: User!
  likes: [ReplyLike!]!
  likeCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  id: Int!
  content: String!
  user: User!
  post: Post!
  replies: [Reply!]!
  likeCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Image {
  id: Int!
  url: String!
  alt: String
  type: String!
  postId: Int!
  post: Post
}

type Tag {
  id: Int!
  name: String!
  slug: String!
  posts: [Post!]
}

type Post {
  id: Int!
  title: String!
  slug: String!
  content: String!
  published: Boolean!
  authorId: Int!
  author: User!
  categories: [Category!]
  comments: [Comment!]
  images: [Image!]
  tags: [Tag!]
  createdAt: DateTime!
  updatedAt: DateTime!
  getCategories: [Category!]!
  getImages: [Image!]!
}

type User {
  id: Int!
  fullname: String!
  username: String!
  email: String!
  avatar: String
  bio: String
  role: RoleUser!
  isActive: Boolean!
  posts: [Post!]
  comments: [Comment!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserType {
  id: Int!
  email: String!
  fullname: String!
  username: String!
  avatar: String
  bio: String
  role: RoleUser!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DeletePostDto {
  id: Int!
  message: String!
}

type TagWithPosts {
  id: Int!
  name: String!
  slug: String!
  posts: [Post!]!
}

type TagCount {
  id: Int!
  name: String!
  slug: String!
  posts: [Post!]
  postCount: Int!
}

type CommentLike {
  id: Int!
  userId: Int!
  commentId: Int!
  user: User!
  createdAt: DateTime!
}

type CommentType {
  id: Int!
  content: String!
  userId: Int!
  postId: Int!
  user: User!
  post: Post!
  likes: [CommentLike!]!
  replies: [Reply!]!
  likeCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Professional {
  id: Int!
  name: String!
  role: RoleProfressional!
  phone: String!
  email: String!
  team: Team
  teamId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Papéis disponíveis para profissionais"""
enum RoleProfressional {
  OWNER
  BUILDER
  ARCHITECT
  ENGINEER
  FOREMAN
  SUPERVISOR
  OPERATOR
  FREELANCER
}

type Team {
  id: Int!
  name: String!
  constructionId: Int!
  construction: Construction
  professionals: [Professional!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Task {
  id: Int!
  name: String!
  status: TaskStatus!
  budgetedCost: Float!
  stageId: Int!
  stage: Stage
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

type Stage {
  id: Int!
  name: String!
  progress: Float!
  phaseId: Int!
  phase: Phase
  isSkipped: Boolean!
  tasks: [Task!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Phase {
  id: Int!
  name: String!
  progress: Float!
  constructionId: Int!
  construction: Construction
  stages: [Stage!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Construction {
  id: Int!
  name: String!
  address: String!
  cep: String!
  city: String!
  district: String!

  """
  Progresso total da construção, calculado pela média ponderada das Phases.
  """
  progress: Float!
  userId: Int!
  user: User!
  teams: [Team!]
  phases: [Phase!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  currentUser: User!
  me: UserType!
  users: [UserType!]!

  """Lista todos os usuários, incluindo os inativos."""
  listAllUsers: [UserType!]!

  """Lista todos os usuários com isActive: true."""
  findActiveUsers: [UserType!]!

  """Lista apenas os usuários com isActive: false."""
  findInactiveUsers: [UserType!]!
  getPosts: [Post!]!
  data(id: Int!): Post
  findPostBySlug(slug: String!): Post
  tags(skip: Int, take: Int, search: String): [Tag!]!
  tag(id: Int!): Tag!
  tagBySlug(slug: String!): Tag!
  popularTags(limit: Int = 10): [TagCount!]!
  getComments: [CommentType!]!
  comment(id: Int!): CommentType!
  CommentsByPost(postId: Int!): [CommentType!]!
  getCategories: [Category!]!
  category(id: Int!): Category!
  replies: [Reply!]!
  reply(id: Int!): Reply!

  """Retorna todas as construções com a hierarquia de progresso completa."""
  constructions: [Construction!]!

  """Retorna uma construção pelo seu ID, incluindo Phases, Stages e Tasks."""
  construction(id: Int!): Construction!
  teams: [Team!]!
  team(id: Int!): Team!
  professionals: [Professional!]!
  professional(id: Int!): Professional!

  """Retorna uma etapa pelo seu ID, incluindo as tarefas filhas."""
  stage(id: Int!): Stage!

  """Retorna todas as etapas de uma fase específica."""
  stagesByPhase(
    """ID da Fase (Phase) para filtrar as etapas."""
    phaseId: Int!
  ): [Stage!]!

  """Retorna uma tarefa pelo seu ID."""
  task(id: Int!): Task!

  """Retorna todas as tarefas de uma etapa (Stage) específica."""
  tasksByStage(
    """ID da Etapa (Stage) para filtrar as tarefas."""
    stageId: Int!
  ): [Task!]!

  """Retorna todas as fases de uma construção específica."""
  phases(
    """ID da construção para filtrar as fases."""
    constructionId: Int!
  ): [Phase!]!

  """Retorna uma fase pelo seu ID, incluindo etapas e tarefas."""
  phase(id: Int!): Phase!
}

type Mutation {
  sendAuthCode(input: SendAuthCodeDto!): String!
  verifyAuthCode(code: String!, email: String!): AuthResult!
  logout: Boolean!
  createUser(input: CreateUserInput!): UserType!
  updateProfile(data: UpdateUserInput!): UserType!
  deactivateAccount: String!
  createPost(data: CreatePostInput!): Post!
  updatePost(id: Int!, data: UpdatePostInput!): Post!
  removePost(id: Int!): DeletePostDto!
  removeTag(id: Int!): Tag!
  createComment(data: CreateCommentInput!): CommentType!
  updateComment(id: Int!, data: UpdateCommentInput!): CommentType!
  removeComment(id: Int!): CommentType!
  createCategory(data: CreateCategoryInput!): Category!
  updateCategory(id: Int!, data: UpdateCategoryInput!): Category!
  removeCategory(id: Int!): Category!
  createReply(data: CreateReplyInput!): Reply!
  updateReply(updateReplyInput: UpdateReplyInput!): Reply!
  removeReply(id: Int!): Reply!
  likeComment(data: CreateCommentLikeInput!): CommentLike!
  unlikeComment(data: DeleteCommentLikeInput!): CommentLike!
  likeReply(data: CreateReplyLikeInput!): ReplyLike!
  unlikeReply(replyId: Int!, userId: Int!): Boolean!

  """Cria uma nova construção e a inicializa com progresso 0.0."""
  createConstruction(createConstructionInput: CreateConstructionInput!): Construction!

  """Atualiza os dados básicos de uma construção."""
  updateConstruction(id: Int!, updateConstructionInput: UpdateConstructionInput!): Construction!

  """
  Recalcula o progresso total da construção baseado no estado atual de todas as Tasks.
  """
  recalculateConstructionProgress(constructionId: Int!): Construction!

  """
  Remove uma construção e todos os seus dados associados (Phases, Stages, Tasks).
  """
  removeConstruction(id: Int!): Construction!
  createTeam(createTeamInput: CreateTeamInput!): Team!
  updateTeam(updateTeamInput: UpdateTeamInput!): Team!
  removeTeam(id: Int!): Team!
  createProfessional(createProfessionalInput: CreateProfessionalInput!): Professional!
  updateProfessional(updateProfessionalInput: UpdateProfessionalInput!): Professional!
  removeProfessional(id: Int!): Professional!

  """Cria uma nova etapa dentro de uma fase específica."""
  createStage(createStageInput: CreateStageInput!): Stage!

  """Atualiza o nome ou se a etapa deve ser pulada."""
  updateStage(id: Int!, updateStageInput: UpdateStageInput!): Stage!

  """
  Remove uma etapa e todas as tarefas (Tasks) filhas. (Exige exclusão em cascata configurada no Prisma).
  """
  removeStage(id: Int!): Boolean!

  """
  Recalcula e atualiza o campo de progresso da etapa com base nas Tasks filhas.
  """
  recalculateStageProgress(stageId: Int!): Stage!
  createTask(createTaskInput: CreateTaskInput!): Task!
  completeTask(id: Int!): Task!

  """
  Atualiza detalhes da tarefa, como nome, custo orçado (budgetedCost) ou status.
  """
  updateTask(id: Int!, updateTaskInput: UpdateTaskInput!): Task!

  """Remove uma tarefa e dispara o recálculo de progresso na Stage pai."""
  removeTask(id: Int!): Boolean!

  """
  Cria uma nova fase na construção. Pode copiar a estrutura de um modelo base.
  """
  createPhase(createPhaseInput: CreatePhaseInput!): Phase!

  """Atualiza o nome de uma fase existente."""
  updatePhase(id: Int!, updatePhaseInput: UpdatePhaseInput!): Phase!

  """Remove uma fase e todas as etapas e tarefas relacionadas."""
  removePhase(id: Int!): Boolean!
}

input SendAuthCodeDto {
  email: String!
}

input CreateUserInput {
  email: String!
  fullname: String!
  username: String!
  role: RoleUser!
}

input UpdateUserInput {
  fullname: String
  username: String
  avatar: String
  bio: String
}

input CreatePostInput {
  title: String!
  content: String!
  published: Boolean! = false
  authorId: Int!
  categories: [Int!]
  tags: [String!]
  images: [CreateImageInput!]
}

input CreateImageInput {
  url: String!
  alt: String
  type: MediaType!
}

enum MediaType {
  image
  video
}

input UpdatePostInput {
  title: String
  content: String
  published: Boolean
  authorId: Int!
  tags: [String!]
  categories: [Int!]
  images: [UpdateImageInput!]
}

input UpdateImageInput {
  url: String
  alt: String
  type: String
}

input CreateCommentInput {
  content: String!
  userId: Int!
  postId: Int!
}

input UpdateCommentInput {
  content: String
  userId: Int
  postId: Int
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  name: String
}

input CreateReplyInput {
  content: String!
  commentId: Int!
  userId: Int!
}

input UpdateReplyInput {
  content: String
  commentId: Int
  userId: Int
  id: Int!
}

input CreateCommentLikeInput {
  userId: Int!
  commentId: Int!
}

input DeleteCommentLikeInput {
  userId: Int!
  commentId: Int!
}

input CreateReplyLikeInput {
  replyId: Int!
  userId: Int!
}

input CreateConstructionInput {
  name: String!
  address: String!
  cep: String!
  city: String!
  district: String!

  """ID do usuário responsável pela obra."""
  userId: Int!
}

input UpdateConstructionInput {
  name: String
  address: String
  cep: String
  city: String
  district: String

  """ID do usuário responsável pela obra."""
  userId: Int
  id: Int!
}

input CreateTeamInput {
  name: String!
  constructionId: Int!
}

input UpdateTeamInput {
  id: Int!
  name: String
  constructionId: Int
}

input CreateProfessionalInput {
  name: String!
  role: RoleProfressional!
  phone: String!
  email: String!
  teamId: Int!
}

input UpdateProfessionalInput {
  name: String
  role: RoleProfressional
  phone: String
  email: String
  teamId: Int
  id: Int!
}

input CreateStageInput {
  name: String!

  """ID da fase à qual esta etapa pertence."""
  phaseId: Int!
}

input UpdateStageInput {
  name: String

  """ID da fase à qual esta etapa pertence."""
  phaseId: Int
  id: ID!
  progress: Float
}

input CreateTaskInput {
  name: String!

  """ID da etapa à qual esta tarefa pertence."""
  stageId: Int!

  """Custo orçado desta tarefa. Usado para ponderar o progresso geral."""
  budgetedCost: Float!

  """Status inicial da tarefa. Padrão: NÃO_INICIADO."""
  status: TaskStatus = NOT_STARTED
}

input UpdateTaskInput {
  name: String

  """ID da etapa à qual esta tarefa pertence."""
  stageId: Int

  """Custo orçado desta tarefa. Usado para ponderar o progresso geral."""
  budgetedCost: Float

  """Status inicial da tarefa. Padrão: NÃO_INICIADO."""
  status: TaskStatus = NOT_STARTED
  id: Int!
}

input CreatePhaseInput {
  name: String!

  """ID da construção à qual esta fase pertence."""
  constructionId: Int!
}

input UpdatePhaseInput {
  name: String

  """ID da construção à qual esta fase pertence."""
  constructionId: Int
  id: Int!
}