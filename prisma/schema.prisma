generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleUser {
  ADMIN @map("admin")
  FREE @map("free")
  STANDARD  @map("standard")
  PREMIUM  @map("premium")
  ENTERPRISE  @map("enterprise")
}

enum MediaType {
  image
  video
}

enum RoleProfessional {
  OWNER @map("owner")           // Proprietário
  BUILDER @map("builder")       // Construtor
  ARCHITECT @map("architect")   // Arquiteto
  ENGINEER @map("engineer")     // Engenheiro
  FOREMAN @map("foreman")       // Mestre de obras
  SUPERVISOR @map("supervisor") // Supervisor
  OPERATOR @map("operator")     // Operador
  FREELANCER @map("freelancer") // Autônomo
}

enum TaskStatus {
  NOT_STARTED @map("not_started")
  IN_PROGRESS @map("in_progress")
  COMPLETED @map("completed")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  fullname  String
  username  String   @unique
  avatar    String?
  bio       String?
  role      RoleUser @default(STANDARD)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  posts         Post[]
  comments      Comment[]
  replies       Reply[]
  commentLikes  CommentLike[]
  replyLikes    ReplyLike[]
  authCodes     AuthCode[]
  sessions      Session[]
  constructions Construction[]

  @@map("users")
}

model AuthCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  email     String
  userId    Int?
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relacionamentos
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_codes")
}

model Session {
  id               Int      @id @default(autoincrement())
  sessionId    String      @unique @db.VarChar(36)
  userId           Int
  accessTokenSign  String 
  userAgent    String?
  ipAddress    String?
  refreshToken     String?
  expiresAt        DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String
  slug       String?    @unique
  content    String
  published  Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   Int
  categories Category[] @relation("PostCategories")
  comments   Comment[]
  images     Image[]
  tags       PostTag[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Tag {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  slug  String  @unique
  posts PostTag[]
}

model PostTag {
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  tag     Tag  @relation(fields: [tagId], references: [id])
  tagId   Int

  @@id([postId, tagId])
}

model Image {
  id     Int       @id @default(autoincrement())
  url    String
  alt    String?
  type   MediaType
  post   Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostCategories")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  replies   Reply[]   @relation("CommentReplies")
  likes     CommentLike[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Reply {
  id        Int         @id @default(autoincrement())
  content   String
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  commentId Int
  comment   Comment     @relation("CommentReplies", fields: [commentId], references: [id], onDelete: Cascade) 
  likes     ReplyLike[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model ReplyLike {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  reply     Reply   @relation(fields: [replyId], references: [id])
  replyId   Int
  createdAt DateTime @default(now())

  @@unique([userId, replyId])
}

model Construction {
  id            Int       @id @default(autoincrement())  
  name          String
  address       String
  cep           String
  city          String
  district      String
  
  // Progresso Calculado
  progress      Float     @default(0.0) // Progresso Geral da Construção

  userId        Int        
  user          User      @relation(fields: [userId], references: [id])
  
  teams         Team[]
  
  // Relacionamento com o novo nível "Phase"
  phases        Phase[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Team {
  id           Int       @id @default(autoincrement()) 
  name         String    // Ex: Equipe de Arquitetos
  construction Construction @relation(fields: [constructionId], references: [id])
  constructionId Int       
  professionals Professional[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Professional {
  id           Int       @id @default(autoincrement()) 
  name         String
  role         RoleProfessional
  phone        String
  email        String
  team         Team      @relation(fields: [teamId], references: [id])
  teamId       Int       

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Renomeado de "Stage" para "Phase" (Fase) - Nível 1
model Phase {
  id             Int        @id @default(autoincrement())  
  name           String     // Ex: Planejamento, Infraestrutura, Acabamento
  progress       Float      @default(0.0) // Progresso Calculado da Fase
  
  constructionId Int          
  construction   Construction @relation(fields: [constructionId], references: [id])
  
  // Relacionamento com o novo nível "Stage" (Etapa)
  stages         Stage[]      

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("phases")
}

// Renomeado de "SubStage" para "Stage" (Etapa) - Nível 2
model Stage {
  id             Int        @id @default(autoincrement())  
  name           String     // Ex: Escolha do Terreno, Fundação, Alvenaria
  progress       Float      @default(0.0) // Progresso Calculado da Etapa
  isSkipped      Boolean    @default(false) // Permite que o cliente pule a etapa.
  
  phaseId        Int          
  phase          Phase      @relation(fields: [phaseId], references: [id])
  
  // Relacionamento com o novo nível "Task" (Tarefa)
  tasks          Task[]      

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("stages")
}

// "Task" (Etapa) - Nível 3
model Task {
  id         Int        @id @default(autoincrement())
  name       String
  status     TaskStatus @default(NOT_STARTED)
  budgetedCost  Float      // Ex: 10000.00 (R$ 10.000,00)

  stageId    Int
  stage      Stage      @relation(fields: [stageId], references: [id])
  startDate  DateTime?
  endDate    DateTime?
  
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}